using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using BabyPlan.Common;
using BabyPlan.DataAccess;
using BabyPlan.Meta;
using System.ServiceModel.Activation;
using BabyPlan.DataStructure;
using BabyPlan.Cache;

namespace BabyPlan.WcfService
{
    // 注意: 使用“重构”菜单上的“重命名”命令，可以同时更改代码、svc 和配置文件中的类名“UserService”。
    public class UserService : IUserService
    {
        #region IUserService 成员
        public AdvancedResult<string> Register(string account, string pwd)
        {
            AdvancedResult<string> result = new AdvancedResult<string>();

            AdvancedResult<bool> dr = CheckAccout(account);
            if (dr.Data)
            {
                result.Error = AppError.ERROR_PERSON_FOUND;
                return result;
            }

            AdUser user = new AdUser();
            user.UserAccount = account;
            user.Pwd = pwd;
          int i =  UserAccessor.Instance.Insert(user);
                        
            if (i > 0)
            {
                result.Error = AppError.ERROR_SUCCESS;
                result.Data = SecurityHelper.GetToken(i.ToString());
            }
            return result;
        }
        public AdvancedResult<bool> CheckAccout(string account)
        {
            AdUser user = null;
            user = UserAccessor.Instance.Get(0, account.Trim(), string.Empty, StateType.Ignore);

            AdvancedResult<bool> result = new AdvancedResult<bool>();
            if (user != null)
            {
                result.Error = AppError.ERROR_PERSON_FOUND;
                result.Data = true;
            }
            return result;
        }
        public AdvancedResult<bool> CheckLogin(string token)
        {
            AdvancedResult<bool> result = new AdvancedResult<bool>();
            if (CacheManagerFactory.GetMemoryManager().Contains(token))
            {
                result.Data = true;
                result.Error = AppError.ERROR_SUCCESS;
            }
            else
            {
                result.Error = AppError.ERROR_PERSON_NOT_LOGIN;
            }
            return result;
        }
        public AdvancedResult<string> Login(string account, string pwd)
        {
            AdUser user = null;
            user = UserAccessor.Instance.Get(0, account.Trim(), pwd.Trim(), StateType.Active);

            AdvancedResult<string> result = new AdvancedResult<string>();
            if (user != null)
            {
                result.Error = AppError.ERROR_SUCCESS;
                result.Data = SecurityHelper.GetToken(user.AdUserId.ToString());
            }
            else
            {
                result.Error = AppError.ERROR_LOGIN_FAILED;
            }
            return result;
        }
        public RespResult Logout(string token)
        {
            RespResult result = new RespResult();
            if (CacheManagerFactory.GetMemoryManager().Contains(token))
            {
                CacheManagerFactory.GetMemoryManager().Remove(token);
            }

            result.Error = AppError.ERROR_SUCCESS;
            return result;
        }
        public RespResult UpdateBabyAge(int bbage, string token)
        {
            RespResult result = new RespResult();
            if (!CacheManagerFactory.GetMemoryManager().Contains(token))
            {
                result.Error = AppError.ERROR_PERSON_NOT_LOGIN;
            }
            else
            {
                int userid = Convert.ToInt32(CacheManagerFactory.GetMemoryManager().Get(token));
                if (userid > 0)
                {
                    AdUser user = UserAccessor.Instance.Get(userid, string.Empty, string.Empty, StateType.Ignore);
                    user.BabyBirthday = DateTime.Now.AddYears(0 - bbage);
                    UserAccessor.Instance.Update(user);
                    result.Error = AppError.ERROR_SUCCESS;
                }
                else
                {
                    result.Error = AppError.ERROR_FAILED;
                }
            }
            return result;
        }
        public AdvancedResult<AdUser> GetUserInfo(string token)
        {
            AdvancedResult<AdUser> result = new AdvancedResult<AdUser>();
            if (!CacheManagerFactory.GetMemoryManager().Contains(token))
            {
                result.Error = AppError.ERROR_PERSON_NOT_LOGIN;
            }
            else
            {
                int userid = Convert.ToInt32(CacheManagerFactory.GetMemoryManager().Get(token));
                if (userid > 0)
                {
                    AdUser user = UserAccessor.Instance.Get(userid, string.Empty, string.Empty, StateType.Ignore);
                    result.Error = AppError.ERROR_SUCCESS;
                    result.Data = user;
                }
                else
                {
                    result.Error = AppError.ERROR_FAILED;
                }
            }
            return result;
        }
        /// <summary>
        /// 判断是否绑定了社交账户，如果有绑定则自动登录，并返回token
        /// </summary>
        /// <param name="socialUser"></param>
        /// <returns></returns>
        public RespResult IsBindSocialUser(SocialUser socialUser)
        {
            RespResult result = new RespResult();

           SocialUser suer =  SocialUserAccessor.Instance.Get(socialUser.Uid, socialUser.SocialUserType);
           if (suer != null)
           {
               result.Error = AppError.ERROR_SUCCESS;
           }
           else
           {
               result.Error = AppError.ERROR_FAILED;
           }
           return result;
        }
        /// <summary>
        /// 绑定社交账户,注册平台账户，并返回token
        /// </summary>
        /// <param name="userName"></param>
        /// <param name="password"></param>
        /// <param name="socialUser"></param>
        /// <returns>token</returns>
        public AdvancedResult<string> BindSocialUser(string userName, string password, SocialUser socialUser)
        {
            AdvancedResult<string> userresult = new AdvancedResult<string>();
            AdvancedResult<string> result = new AdvancedResult<string>();
            //注册平台账户（包括判断是否有平台账户）
            userresult = this.Register(userName, password);

            //如果没有平台账户并注册新平台账户后
             if (userresult.Error == AppError.ERROR_SUCCESS)
            {
                int userid = Convert.ToInt32(CacheManagerFactory.GetMemoryManager().Get(userresult.Data));
                socialUser.UserId = userid;
                SocialUserAccessor.Instance.Insert(socialUser);
                result.Data = SecurityHelper.GetToken(userid.ToString());
                result.Error = AppError.ERROR_SUCCESS;
            }
            else
            {
                result.Error = AppError.ERROR_FAILED;
            }

            return result;
        }
        /// <summary>
        /// 登录后绑定
        /// </summary>
        /// <param name="token"></param>
        /// <param name="socialUser"></param>
        /// <returns></returns>
        public AdvancedResult<string> BindSocialUserAfterLogin(string token, SocialUser socialUser)
        {
            AdvancedResult<string> result = new AdvancedResult<string>();

            if (!CacheManagerFactory.GetMemoryManager().Contains(token))
            {
                result.Error = AppError.ERROR_PERSON_NOT_LOGIN;
            }
            else
            {
                SocialUserAccessor.Instance.Insert(socialUser);
                result.Error = AppError.ERROR_SUCCESS;
            }

            return result;
        }

        #endregion

       
    }
}
