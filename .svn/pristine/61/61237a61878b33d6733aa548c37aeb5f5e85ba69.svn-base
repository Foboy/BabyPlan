using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using BabyPlan.Common;
using BabyPlan.WcfService;
using BabyPlan.Meta;
using BabyPlan.mvcApp.Model;
using BabyPlan.DataStructure;

namespace BabyPlan.mvcApp.Controllers
{
    public class TradeController : BaseController
    {
        //
        // GET: /Trade/

        public ActionResult Index()
        {
            return All(null, null);
        }

        public ActionResult All(int? pid, int? id)
        {
            int productId = pid ?? 0;
            ViewBag.ItemType = ItemType.Ignore;
            if (pid > 0)
            {
                return Detail(productId, id);
            }
            else
            {
                return View("~/Views/Trade/Index.cshtml");
            }
        }

        public ActionResult Clothes(int? pid, int? id)
        {
            int productId = pid ?? 0;
            ViewBag.ItemType = ItemType.Clothes;
            if (pid > 0)
            {
                return Detail(productId, id);
            }
            else
            {
                return View("~/Views/Trade/Index.cshtml");
            }
        }

        public ActionResult Toys(int? pid, int? id)
        {
            int productId = pid ?? 0;
            ViewBag.ItemType = ItemType.Toys;
            if (pid > 0)
            {
                return Detail(productId, id);
            }
            else
            {
                return View("~/Views/Trade/Index.cshtml");
            }
        }

        public ActionResult Others(int? pid, int? id)
        {
            int productId = pid ?? 0;
            ViewBag.ItemType = ItemType.Others;
            if (pid > 0)
            {
                return Detail(productId, id);
            }
            else
            {
                return View("~/Views/Trade/Index.cshtml");
            }
        }

        public JsonResult AjaxGetGoods()
        {
            ItemType itemType = ItemType.Ignore;
            SexType sexType = SexType.Ignore;
            int age = 0;
            int pageSize=10;
            int pageIndex=0;

            Enum.TryParse<ItemType>(Request["itemType"], out itemType);
            Enum.TryParse<SexType>(Request["sexType"], out sexType);
            int.TryParse(Request["age"],out age);
            int.TryParse(Request["page"], out pageIndex);

            ProductServiceClient client = new ProductServiceClient();
            AdvancedResult<PageEntity<ProProductItem>> response = client.LoadBBList(itemType, sexType, age, pageSize, pageIndex);

            List<ProductItemModel> items = new List<ProductItemModel>();

            if (response.Error == DataStructure.AppError.ERROR_SUCCESS)
            {
                response.Data.Items = response.Data.Items ?? new List<ProProductItem>();

                BindOption bindOptions = BindOption.DefalutBindOption;
                bindOptions.ProductItemBindType = bindOptions.ProductItemBindType | ProductItemBindType.Product;
                bindOptions.ProductBindType = bindOptions.ProductBindType | ProductBindType.ReplayNum;
                bindOptions.ProductItemsBindNum = 0;

                foreach (var p in response.Data.Items)
                {
                    items.Add(new ProductItemModel().Bind(p, bindOptions));
                }
            }
            AdvancedResult<List<ProductItemModel>> result = new AdvancedResult<List<ProductItemModel>>();
            result.Error = response.Error;
            result.ErrorMessage = response.ErrorMessage;
            result.ExMessage = response.ExMessage;
            result.Data = items;
            return Json(result, JsonRequestBehavior.AllowGet);
        }

        public ActionResult Detail(int pid, int? id)
        {
            ViewBag.ItemId = id;
            ProductServiceClient client = new ProductServiceClient();
            AdvancedResult<List<ProProductItem>> response = client.LoadInterestingBB(CurrentToken);

            List<ProductItemModel> interestings = new List<ProductItemModel>();

            if (response.Error == DataStructure.AppError.ERROR_SUCCESS)
            {
                response.Data = response.Data ?? new List<ProProductItem>();
                response.Data = response.Data.Take(4).ToList();

                BindOption bindOptions = BindOption.DefalutBindOption;

                foreach (var p in response.Data)
                {
                    interestings.Add(new ProductItemModel().Bind(p, bindOptions));
                }
            }

            ProductModel productModel = new ProductModel();
            AdvancedResult<ProProduct> product = client.GetBBInfo(pid);
            if (product.Error == DataStructure.AppError.ERROR_SUCCESS)
            {
                BindOption bindOptions = BindOption.DefalutBindOption;
                bindOptions.ProductItemsBindNum = 0;
                bindOptions.ProductBindType = bindOptions.ProductBindType | ProductBindType.ReplayNum;
                bindOptions.ProductBindType = ProductBindType.Author | ProductBindType.Items;

                productModel.Bind(product.Data, bindOptions);

                client.SetBBPostViewNum(product.Data.Pid);
            }

            ViewBag.Product = productModel;
            ViewBag.Interests = interestings;

            return View("~/Views/Trade/Detail.cshtml");
        }

        public JsonResult GetReplys(int pid)
        {
            int pageIndex = 0;
            int pageSize = 10;
            int.TryParse(Request["page"], out pageIndex);
            ReplyServiceClient client = new ReplyServiceClient();
            AdvancedResult<PageEntity<GenReply>> response = client.LoadReplyListByBBPostID(pid, pageIndex, pageSize);
            IList<ReplyModel> models = new List<ReplyModel>();
            string paging = string.Empty; 
            int count = 0;
            if (response.Error == AppError.ERROR_SUCCESS)
            {
                count = response.Data.RecordsCount;
                paging = HtmlFormatHelper.GeneratePagingHtml(response.Data.PageIndex, response.Data.PageSize, response.Data.RecordsCount, "javascript:void(LoadComments({0}))", "下一页", "上一页", null, null, null);

                BindOption bindOptions = BindOption.DefalutBindOption;
                bindOptions.ReplyBindNum = 0;
                bindOptions.ReplayBindType = ReplayBindType.Author;

                models = ReplyModel.BindList(response.Data.Items, bindOptions);
            }
            foreach (ReplyModel r in models)
            {
                if (r.Author != null && r.Author.HeadPic != null)
                {
                    r.Author.HeadPic.DisplaySeting(50, 50);
                    r.CreateTimeString = r.CreateTime.ToString("HH:mm");
                }
            }
            return Json(new { data = models, paging = paging, count = count }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult AjaxReplay(int pid)
        {
            string content = Request["comment_input"];

            RespResult response = new RespResult();

            if (string.IsNullOrEmpty(content) || content.Length < 10 || content.Length > 300)
            {
                response.Error = AppError.ERROR_FAILED;
                response.ExMessage = "回复内容长度不合法！";
                return Json(response);
            }

            ReplyServiceClient client = new ReplyServiceClient();
            response = client.ReplyBBPost(pid, content, CurrentToken);
            return Json(response);
        }
    }
}
