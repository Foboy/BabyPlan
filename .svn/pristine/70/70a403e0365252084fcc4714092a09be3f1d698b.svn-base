using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using BabyPlan.Common;
using BabyPlan.Meta;
using BabyPlan.DataStructure;
using BabyPlan.Cache;
using BabyPlan.DataAccess;

namespace BabyPlan.WcfService
{
    // 注意: 使用“重构”菜单上的“重命名”命令，可以同时更改代码、svc 和配置文件中的类名“ReplyService”。
    public class ReplyServiceClient : IReplyService
    {
        public void Close()
        { }
        //获取与我相关的回复数量
        public AdvancedResult<int> GetMyBBReplyNum(string token)
        {
            AdvancedResult<int> result = new AdvancedResult<int>();
            if (!CacheManagerFactory.GetMemoryManager().Contains(token))
            {
                result.Error = AppError.ERROR_PERSON_NOT_LOGIN;
            }
            else
            {
                 int userid = Convert.ToInt32(CacheManagerFactory.GetMemoryManager().Get(token));
                 result.Data = GenReplyAccessor.Instance.GetBBReplyCount(0, ReplyType.BB,0,StateType.Ignore, userid);
                 result.Error = AppError.ERROR_SUCCESS;
            }
            
            return result;
        }

        //获取单个宝贝的回复数量
        public AdvancedResult<int> GetBBPostReplyNum(int bbPostID)
        {
            AdvancedResult<int> result = new AdvancedResult<int>();
            result.Data = GenReplyAccessor.Instance.GetBBReplyCount(bbPostID, ReplyType.BB, 0, StateType.Ignore, 0);
            result.Error = AppError.ERROR_SUCCESS;

            return result;
        }

        //获取与我相关的宝贝回复列表
        public AdvancedResult<PageEntity<GenReply>> LoadMyBBReplyList(string token, int pageInex, int pageSize)
        {
            AdvancedResult<PageEntity<GenReply>> result = new AdvancedResult<PageEntity<GenReply>>();
            if (!CacheManagerFactory.GetMemoryManager().Contains(token))
            {
                result.Error = AppError.ERROR_PERSON_NOT_LOGIN;
            }
            else
            {
                int userid = Convert.ToInt32(CacheManagerFactory.GetMemoryManager().Get(token));
                result.Data = GenReplyAccessor.Instance.Search(0, ReplyType.BB, 0, StateType.Active, userid, pageInex, pageSize);
                result.Error = AppError.ERROR_SUCCESS;
            }
            return result;
        }

        //分页获取单个宝贝的回复列表
        public AdvancedResult<PageEntity<GenReply>> LoadReplyListByBBPostID(int bbPostID, int pageInex, int pageSize)
        {
            AdvancedResult<PageEntity<GenReply>> result = new AdvancedResult<PageEntity<GenReply>>();
            result.Data = GenReplyAccessor.Instance.Search(bbPostID, ReplyType.BB, 0, StateType.Active, 0, pageInex, pageSize);
            result.Error = AppError.ERROR_SUCCESS;

            return result;
        }
        //回复评论
        public RespResult ReplyBBPost(int bbPostID, string Content, string token)
        {
            RespResult result = new RespResult();
            if (!CacheManagerFactory.GetMemoryManager().Contains(token))
            {
                result.Error = AppError.ERROR_PERSON_NOT_LOGIN;
            }
            else
            {
                 int userid = Convert.ToInt32(CacheManagerFactory.GetMemoryManager().Get(token));
                 ProProduct product = ProProductAccessor.Instance.Get(bbPostID);
                 if (product != null)
                 {
                     GenReply reply = new GenReply();
                     reply.ObjId = bbPostID;
                     reply.ObjType = (int)ReplyType.BB;
                     reply.Content = Content;
                     reply.CreateId = userid;
                     reply.RefUserId = product.CreateId;
                     GenReplyAccessor.Instance.Insert(reply);
                     result.Error = AppError.ERROR_SUCCESS;
                 }
                 else
                 {
                     result.Error = AppError.ERROR_FAILED;
                 }
            }

            return result;
        }

        //发布心愿单
        public RespResult Bless(string content)
        {
            RespResult result = new RespResult();
            GenBless bless = new GenBless();
            bless.Content = content;
            bless.CreateTime = System.DateTime.Now;
            GenBlessAccessor.Instance.Insert(bless);
            result.Error = AppError.ERROR_SUCCESS;
            return result;
        }
    }
}
