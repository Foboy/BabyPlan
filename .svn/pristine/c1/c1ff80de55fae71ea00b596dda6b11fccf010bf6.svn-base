using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using BabyPlan.DataStructure;
using System.Text;
using System.Text.RegularExpressions;

namespace BabyPlan.mvcApp.UrlRoutes
{
    /// <summary>
    /// 宝贝详情路由规则解析，重写
    /// </summary>
    public class TradeDetailRoute : RouteBase
    {
        public override RouteData GetRouteData(HttpContextBase httpContext)
        {
            var virtualPath = httpContext.Request.AppRelativeCurrentExecutionFilePath + httpContext.Request.PathInfo;
            virtualPath = virtualPath.Substring(2).Trim('/');

            if (!virtualPath.StartsWith("二手宝贝"))
                return null;

            Regex detailRegex = new Regex(@"/\d+/?$");
            if (!detailRegex.IsMatch(virtualPath))
                return null;

            string[] paramsList = virtualPath.Split(new char[] { '/' }, StringSplitOptions.RemoveEmptyEntries);

            int pid = 0;
            int id = 0;

            for (int i = 0; i < paramsList.Length; i++)
            {
                if (pid > 0)
                {
                    int.TryParse(paramsList[i], out id);
                }
                else
                {
                    int.TryParse(paramsList[i], out pid);
                }
            }

            var data = new RouteData(this, new MvcRouteHandler());
            data.Values.Add("controller", "Trade");
            data.Values.Add("action", "Detail");
            data.Values.Add("pid", pid);
            data.Values.Add("id", id);
            return data;
        }

        public override VirtualPathData GetVirtualPath(RequestContext requestContext, RouteValueDictionary values)
        {
            if (!values.ContainsKey("controller") || !values["controller"].ToString().Equals("trade", StringComparison.OrdinalIgnoreCase))
                return null;

            if (!values.ContainsKey("action") || !values["action"].ToString().Equals("detail", StringComparison.OrdinalIgnoreCase))
                return null;
            if (!values.ContainsKey("pid"))
                return null;
            int pid = 0;
            if (!int.TryParse(values["pid"].ToString(), out pid) || pid <= 0)
                return null;
            int id = 0;
            if (values.ContainsKey("id"))
            { 
                int.TryParse(values["id"].ToString(),out id);
            }
            string path = "二手宝贝/" + pid.ToString() + (id > 0 ? ("/" + id.ToString()) : string.Empty);

            return new VirtualPathData(this, path.ToLowerInvariant());
        }
    }
}