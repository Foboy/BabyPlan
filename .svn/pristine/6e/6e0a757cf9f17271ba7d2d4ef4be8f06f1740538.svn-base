/*
 * 创建者: yangchao   创建时间:2011-10-11
 * 文件描述:缓存管理器基本实现
 * 修改历史:
 * 2011-10-11 author  description
 */
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Net;
using System.Xml;
using System.IO;

namespace BabyPlan.Cache
{
    /// <summary>
    /// 缓存管理器基本实现
    /// </summary>
    /// <remarks>
    /// 只对写数据加锁,没有对读数据加锁
    /// </remarks>
    public abstract class CacheManagerBase : CachConfigHandle, ICacheManager
    {
        /// <summary>
        /// 缓存数据存储器
        /// </summary>
        private ICacheDepository _cacheDepository = null;
        /// <summary>
        /// 线程访问同步锁
        /// </summary>
        private ReaderWriterLockSlim _locker = new ReaderWriterLockSlim();

        /// <summary>
        /// 设置 缓存数据存储器
        /// </summary>
        public ICacheDepository CacheDepository {
            set {
                _cacheDepository = value;
            }
        }
        /// <summary>
        /// 检查时间
        /// </summary>
        public virtual int CheckTimeSpanMinutes {
            get {                
                return 1;
            }
        }

        /// <summary>
        /// 自动清除过期缓存项
        /// </summary>
        /// <remarks></remarks>
        protected void AutomaticRemoveDueCacheItem()
        {
            //每隔60秒检查失效缓存项
            Thread thCheckCacheItem = new Thread(new ThreadStart(thCheckCacheItemIsExpire));
            thCheckCacheItem.IsBackground = true;
            thCheckCacheItem.Start();
        }

        /// <summary>
        /// 添加缓存 默认保存30分钟
        /// </summary>
        /// <param name="key">缓存键</param>
        /// <param name="value">缓存值</param>
        /// <remarks></remarks>
        public void Add(string key, object value)
        {
            Add(key,value,TimeSpan.FromMinutes(30));           
        }

        /// <summary>
        /// 添加缓存
        /// </summary>
        /// <param name="key">缓存键</param>
        /// <param name="value">缓存值</param>
        /// <param name="cacheTime">缓存时间</param>
        /// <remarks></remarks>
        public void Add(string key, object value, TimeSpan cacheTime)
        {
            _locker.EnterWriteLock();
            try
            {
                if (_cacheDepository.Contains(key))
                {
                    _cacheDepository.Remove(key);
                }
                CacheItem item = new CacheItem() { CacheData = value, ExpireTime = DateTime.Now.Add(cacheTime) };
                _cacheDepository.Add(key, item);
            }
            catch(Exception ex) {
                throw ex;
            }
            finally {
                _locker.ExitWriteLock();
            }
        }

        /// <summary>
        /// 获取 缓存值
        /// </summary>
        /// <param name="key">缓存键</param>
        /// <returns></returns>
        /// <remarks></remarks>
        public object Get(string key)
        {
            CacheItem item = null;

            if (Contains(key))
                item = _cacheDepository.Get(key) as CacheItem;

            if (item != null)
            {
                if (item.IsExpire)
                {
                    _cacheDepository.Remove(key);
                }

                return item.CacheData;
            }

            return null;
        }

        /// <summary>
        /// 是否包含某个键
        /// </summary>
        /// <param name="key">缓存键</param>
        /// <returns><c>true</c> 如果 [contains] [the specified key]; otherwise, <c>false</c>.</returns>
        /// <remarks></remarks>
        public bool Contains(string key)
        {
            return _cacheDepository.Contains(key);
        }

        /// <summary>
        /// 获取缓存值
        /// </summary>
        /// <typeparam name="T">数据类型</typeparam>
        /// <param name="key">缓存键</param>
        /// <returns></returns>
        /// <remarks></remarks>
        public T Get<T>(string key)
        {
            return (T)Get(key);
        }

        /// <summary>
        /// 移除缓存项
        /// </summary>
        /// <param name="key">缓存键</param>
        /// <remarks></remarks>
        public void Remove(string key)
        {
            _cacheDepository.Remove(key);
        }

        /// <summary>
        /// 清除所有缓存
        /// </summary>
        /// <remarks></remarks>
        public void Clear()
        {
            _cacheDepository.Clear();
        }

        /// <summary>
        /// 检查缓存项是否失效
        /// </summary>
        private void thCheckCacheItemIsExpire()
        {
            List<string> expired = new List<string>();
            while (true) {

                foreach (KeyValuePair<string, object> kv in _cacheDepository) {
                    CacheItem item = kv.Value as CacheItem;
                    if (item.IsExpire) {
                        expired.Add(kv.Key);
                        //_cacheDepository.Remove(kv.Key);
                    }
                }
                for (int i = 0, c = expired.Count; i < c; i++)
                {
                    if (_cacheDepository.Contains(expired[i]))
                    {
                        _cacheDepository.Remove(expired[i]);
                    }
                }
                expired.Clear();
                Thread.Sleep(1000 * 60 * CheckTimeSpanMinutes);
            }
        }

    }

    
}
